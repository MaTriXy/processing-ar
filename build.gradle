buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.5'
        classpath group: 'org.zeroturnaround', name: 'zt-zip', version: '1.9'
    }
}
apply plugin: 'maven'

dependencies {
    compile name: 'android'
    compile name: 'core'
    compile name: 'gar-common'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['src/']
        }
    }
}

jar {
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Gradle-Version": "$gradle.gradleVersion"
        )
    }
}

clean.doFirst {
    delete "library/ar.jar"
}

import java.nio.file.Files

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

// Creates the pom file, but for now let's just use the template in the core folder
task createPom {
    pom {
        project {
            groupId 'org.p5android'
            artifactId 'processing-ar'
            version '4.0.1'
            packaging 'jar'
            licenses {
                license {
                    name 'GNU Lesser General Public License, version 2.1'
                    url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("$buildDir/libs/ar.pom")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Does not work because of Processing-specific tags in source code, such as @webref
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
//     archives javadocJar
    archives sourcesJar
}

jar.doLast { task ->
    ant.checksum file: task.archivePath
}

task dist {
    doLast {
        File arJar = file("library/ar.jar");
        //create intermediate folder if they don't exist
        arJar.mkdirs();
        // make copy of jar file to library folder
        Files.copy(file("$buildDir/libs/ar.jar").toPath(),
                arJar.toPath(), REPLACE_EXISTING);
    }
}

dist.dependsOn build